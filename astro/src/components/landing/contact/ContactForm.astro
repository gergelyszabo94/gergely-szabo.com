---
const hCaptchaSiteKey = "2334fa25-f8a1-4bcc-b3b8-5944aa4ac339";
---

<script src="https://hcaptcha.com/1/api.js" async defer></script>

<div class="col-lg-8 mx-auto">
    <form
        name="sentMessage"
        id="contactForm"
        novalidate
        class="needs-validation"
    >
        <div class="control-group p-2">
            <div class="form-group floating-label-form-group controls">
                <input
                    type="text"
                    class="form-control"
                    id="contactName"
                    placeholder="Name"
                    name="name"
                    required
                />
                <div class="invalid-feedback">Please include a name.</div>
            </div>
        </div>
        <div class="control-group p-2">
            <div class="form-group floating-label-form-group controls">
                <input
                    type="email"
                    class="form-control"
                    id="contactEmail"
                    placeholder="Email Address"
                    name="email"
                    required
                />
                <div class="invalid-feedback">
                    Please enter a valid email address.
                </div>
            </div>
        </div>
        <div class="control-group p-2">
            <div class="form-group floating-label-form-group controls">
                <textarea
                    class="form-control"
                    id="contactMessage"
                    rows="5"
                    placeholder="Message"
                    name="message"
                    required></textarea>
                <div class="invalid-feedback">Please enter a message.</div>
            </div>
        </div>
        <div class="control-group p-2 text-center">
            <div class="h-captcha" id="hcaptcha" data-sitekey={hCaptchaSiteKey}>
            </div>
            <div class="invalid-feedback" id="captchaError">
                Please solve the captcha.
            </div>
        </div>
        <div class="control-group p-2">
            <div class="form-group">
                <button type="submit" class="btn btn-primary btn-lg">
                    Send</button
                >
            </div>
        </div>
        <div class="control-group p-2">
            <div
                id="contactSubmitResult"
                class="alert alert-dismissible fade"
                role="alert"
            >
                <span></span>
                <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="alert"
                    aria-label="Close"
                >
                </button>
            </div>
        </div>
    </form>
</div>

<script is:inline>
    const submitForm = async (data = {}) => {
        const response = await fetch(
            "https://siteapi.gergely-szabo.com/email/send",
            {
                method: "POST",
                mode: "cors", // no-cors, *cors, same-origin
                cache: "no-cache",
                credentials: "same-origin",
                headers: {
                    "Content-Type": "application/json",
                },
                redirect: "follow",
                referrerPolicy: "no-referrer",
                body: JSON.stringify(data),
            }
        );
        if (!response.ok) throw response.json();
        else return response.json();
    };

    const errorOnSubmit = (error, resultEl) => {
        console.log(error);
        resultEl.querySelector("span").textContent =
            "We were not able to recieve your message, please try again later.";
        resultEl.classList.add("alert-danger", "show");
    };

    const contactForm = document.getElementById("contactForm");

    contactForm.addEventListener(
        "submit",
        (event) => {
            // so the page does not get reloaded
            event.preventDefault();
            event.stopPropagation();

            const perishableData = new FormData(event.target);
            const data = [...perishableData.entries()];
            // empty string when captcha not solved
            // captcha token when solved
            const hcaptchaToken = document
                .getElementById("hcaptcha")
                .querySelector("iframe")
                .getAttribute("data-hcaptcha-response");

            if (!contactForm.checkValidity() || hcaptchaToken === "") {
                if (hcaptchaToken === "") {
                    document
                        .getElementById("captchaError")
                        .classList.add("show");

                    // ugly way to make the captcha
                    // erro disappear
                    setTimeout(() => {
                        document
                            .getElementById("captchaError")
                            .classList.remove("show");
                    }, 20000);
                } else
                    document
                        .getElementById("captchaError")
                        .classList.remove("show");
            } else {
                // in case it was first attempted to
                // submit without a valid captcha
                document
                    .getElementById("captchaError")
                    .classList.remove("show");

                const payload = {
                    name: data[0][1],
                    email: data[1][1],
                    content: data[2][1],
                    hCaptcha: hcaptchaToken,
                };

                const resultEl = document.getElementById("contactSubmitResult");

                submitForm(payload)
                    .then((response) => {
                        if (response.MessageId) {
                            resultEl.querySelector("span").textContent =
                                "Your message was sent!";
                            resultEl.classList.add("alert-success", "show");
                        } else errorOnSubmit(response, resultEl);
                    })
                    .catch((err) => {
                        errorOnSubmit(err, resultEl);
                    });
            }
            contactForm.classList.add("was-validated");
        },
        false
    );
</script>

<style>
    /* to add when response to submit is */
    .show {
        display: block;
    }

    .floating-label-form-group {
        position: relative;
        margin-bottom: 0;
        padding-bottom: 0.5em;
        border-bottom: 1px solid #eeeeee;
    }

    .floating-label-form-group input,
    .floating-label-form-group textarea {
        font-size: 1.5em;
        position: relative;
        z-index: 1;
        padding-right: 0;
        padding-left: 0;
        resize: none;
        border: none;
        border-radius: 0;
        background: none;
        box-shadow: none !important;
    }

    .floating-label-form-group label {
        font-size: 0.85em;
        line-height: 1.764705882em;
        position: relative;
        z-index: 0;
        top: 2em;
        display: block;
        margin: 0;
        -webkit-transition: top 0.3s ease, opacity 0.3s ease;
        -moz-transition: top 0.3s ease, opacity 0.3s ease;
        -ms-transition: top 0.3s ease, opacity 0.3s ease;
        transition: top 0.3s ease, opacity 0.3s ease;
        vertical-align: middle;
        vertical-align: baseline;
        opacity: 0;
    }

    .floating-label-form-group:not(:first-child) {
        padding-left: 14px;
        border-left: 1px solid #eeeeee;
    }

    .floating-label-form-group-with-value label {
        top: 0;
        opacity: 1;
    }

    .floating-label-form-group-with-focus label {
        color: #71bcce;
    }

    form .row:first-child .floating-label-form-group {
        border-top: 1px solid #eeeeee;
    }
</style>
